// Code generated by mockery. DO NOT EDIT.

package db

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repo "github.com/dsh2dsh/edgar/internal/repo"
)

// MockRepo is an autogenerated mock type for the Repo type
type MockRepo struct {
	mock.Mock
}

type MockRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepo) EXPECT() *MockRepo_Expecter {
	return &MockRepo_Expecter{mock: &_m.Mock}
}

// AddCompany provides a mock function with given fields: ctx, cik, name
func (_m *MockRepo) AddCompany(ctx context.Context, cik uint32, name string) (bool, error) {
	ret := _m.Called(ctx, cik, name)

	if len(ret) == 0 {
		panic("no return value specified for AddCompany")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) (bool, error)); ok {
		return rf(ctx, cik, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string) bool); ok {
		r0 = rf(ctx, cik, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint32, string) error); ok {
		r1 = rf(ctx, cik, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_AddCompany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCompany'
type MockRepo_AddCompany_Call struct {
	*mock.Call
}

// AddCompany is a helper method to define mock.On call
//   - ctx context.Context
//   - cik uint32
//   - name string
func (_e *MockRepo_Expecter) AddCompany(ctx interface{}, cik interface{}, name interface{}) *MockRepo_AddCompany_Call {
	return &MockRepo_AddCompany_Call{Call: _e.mock.On("AddCompany", ctx, cik, name)}
}

func (_c *MockRepo_AddCompany_Call) Run(run func(ctx context.Context, cik uint32, name string)) *MockRepo_AddCompany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(string))
	})
	return _c
}

func (_c *MockRepo_AddCompany_Call) Return(_a0 bool, _a1 error) *MockRepo_AddCompany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_AddCompany_Call) RunAndReturn(run func(context.Context, uint32, string) (bool, error)) *MockRepo_AddCompany_Call {
	_c.Call.Return(run)
	return _c
}

// AddFact provides a mock function with given fields: ctx, tax, name
func (_m *MockRepo) AddFact(ctx context.Context, tax string, name string) (uint32, error) {
	ret := _m.Called(ctx, tax, name)

	if len(ret) == 0 {
		panic("no return value specified for AddFact")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (uint32, error)); ok {
		return rf(ctx, tax, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) uint32); ok {
		r0 = rf(ctx, tax, name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tax, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_AddFact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFact'
type MockRepo_AddFact_Call struct {
	*mock.Call
}

// AddFact is a helper method to define mock.On call
//   - ctx context.Context
//   - tax string
//   - name string
func (_e *MockRepo_Expecter) AddFact(ctx interface{}, tax interface{}, name interface{}) *MockRepo_AddFact_Call {
	return &MockRepo_AddFact_Call{Call: _e.mock.On("AddFact", ctx, tax, name)}
}

func (_c *MockRepo_AddFact_Call) Run(run func(ctx context.Context, tax string, name string)) *MockRepo_AddFact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockRepo_AddFact_Call) Return(_a0 uint32, _a1 error) *MockRepo_AddFact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_AddFact_Call) RunAndReturn(run func(context.Context, string, string) (uint32, error)) *MockRepo_AddFact_Call {
	_c.Call.Return(run)
	return _c
}

// AddFactUnit provides a mock function with given fields: ctx, fact
func (_m *MockRepo) AddFactUnit(ctx context.Context, fact repo.FactUnit) error {
	ret := _m.Called(ctx, fact)

	if len(ret) == 0 {
		panic("no return value specified for AddFactUnit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.FactUnit) error); ok {
		r0 = rf(ctx, fact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_AddFactUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFactUnit'
type MockRepo_AddFactUnit_Call struct {
	*mock.Call
}

// AddFactUnit is a helper method to define mock.On call
//   - ctx context.Context
//   - fact repo.FactUnit
func (_e *MockRepo_Expecter) AddFactUnit(ctx interface{}, fact interface{}) *MockRepo_AddFactUnit_Call {
	return &MockRepo_AddFactUnit_Call{Call: _e.mock.On("AddFactUnit", ctx, fact)}
}

func (_c *MockRepo_AddFactUnit_Call) Run(run func(ctx context.Context, fact repo.FactUnit)) *MockRepo_AddFactUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repo.FactUnit))
	})
	return _c
}

func (_c *MockRepo_AddFactUnit_Call) Return(_a0 error) *MockRepo_AddFactUnit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_AddFactUnit_Call) RunAndReturn(run func(context.Context, repo.FactUnit) error) *MockRepo_AddFactUnit_Call {
	_c.Call.Return(run)
	return _c
}

// AddLabel provides a mock function with given fields: ctx, factId, label, descr, labelHash, descrHash
func (_m *MockRepo) AddLabel(ctx context.Context, factId uint32, label string, descr string, labelHash uint64, descrHash uint64) error {
	ret := _m.Called(ctx, factId, label, descr, labelHash, descrHash)

	if len(ret) == 0 {
		panic("no return value specified for AddLabel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint32, string, string, uint64, uint64) error); ok {
		r0 = rf(ctx, factId, label, descr, labelHash, descrHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_AddLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLabel'
type MockRepo_AddLabel_Call struct {
	*mock.Call
}

// AddLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - factId uint32
//   - label string
//   - descr string
//   - labelHash uint64
//   - descrHash uint64
func (_e *MockRepo_Expecter) AddLabel(ctx interface{}, factId interface{}, label interface{}, descr interface{}, labelHash interface{}, descrHash interface{}) *MockRepo_AddLabel_Call {
	return &MockRepo_AddLabel_Call{Call: _e.mock.On("AddLabel", ctx, factId, label, descr, labelHash, descrHash)}
}

func (_c *MockRepo_AddLabel_Call) Run(run func(ctx context.Context, factId uint32, label string, descr string, labelHash uint64, descrHash uint64)) *MockRepo_AddLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(string), args[3].(string), args[4].(uint64), args[5].(uint64))
	})
	return _c
}

func (_c *MockRepo_AddLabel_Call) Return(_a0 error) *MockRepo_AddLabel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_AddLabel_Call) RunAndReturn(run func(context.Context, uint32, string, string, uint64, uint64) error) *MockRepo_AddLabel_Call {
	_c.Call.Return(run)
	return _c
}

// AddUnit provides a mock function with given fields: ctx, name
func (_m *MockRepo) AddUnit(ctx context.Context, name string) (uint32, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for AddUnit")
	}

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint32, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint32); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepo_AddUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUnit'
type MockRepo_AddUnit_Call struct {
	*mock.Call
}

// AddUnit is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockRepo_Expecter) AddUnit(ctx interface{}, name interface{}) *MockRepo_AddUnit_Call {
	return &MockRepo_AddUnit_Call{Call: _e.mock.On("AddUnit", ctx, name)}
}

func (_c *MockRepo_AddUnit_Call) Run(run func(ctx context.Context, name string)) *MockRepo_AddUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockRepo_AddUnit_Call) Return(_a0 uint32, _a1 error) *MockRepo_AddUnit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepo_AddUnit_Call) RunAndReturn(run func(context.Context, string) (uint32, error)) *MockRepo_AddUnit_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFactUnits provides a mock function with given fields: ctx, length, next
func (_m *MockRepo) CopyFactUnits(ctx context.Context, length int, next func(int) (repo.FactUnit, error)) error {
	ret := _m.Called(ctx, length, next)

	if len(ret) == 0 {
		panic("no return value specified for CopyFactUnits")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(int) (repo.FactUnit, error)) error); ok {
		r0 = rf(ctx, length, next)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepo_CopyFactUnits_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFactUnits'
type MockRepo_CopyFactUnits_Call struct {
	*mock.Call
}

// CopyFactUnits is a helper method to define mock.On call
//   - ctx context.Context
//   - length int
//   - next func(int)(repo.FactUnit , error)
func (_e *MockRepo_Expecter) CopyFactUnits(ctx interface{}, length interface{}, next interface{}) *MockRepo_CopyFactUnits_Call {
	return &MockRepo_CopyFactUnits_Call{Call: _e.mock.On("CopyFactUnits", ctx, length, next)}
}

func (_c *MockRepo_CopyFactUnits_Call) Run(run func(ctx context.Context, length int, next func(int) (repo.FactUnit, error))) *MockRepo_CopyFactUnits_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(func(int) (repo.FactUnit, error)))
	})
	return _c
}

func (_c *MockRepo_CopyFactUnits_Call) Return(_a0 error) *MockRepo_CopyFactUnits_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepo_CopyFactUnits_Call) RunAndReturn(run func(context.Context, int, func(int) (repo.FactUnit, error)) error) *MockRepo_CopyFactUnits_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepo creates a new instance of MockRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepo {
	mock := &MockRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
